// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sp_external.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	External_GetAll_FullMethodName                = "/protos.External/GetAll"
	External_GetAllStream_FullMethodName          = "/protos.External/GetAllStream"
	External_GetPipelines_FullMethodName          = "/protos.External/GetPipelines"
	External_GetPipeline_FullMethodName           = "/protos.External/GetPipeline"
	External_CreatePipeline_FullMethodName        = "/protos.External/CreatePipeline"
	External_UpdatePipeline_FullMethodName        = "/protos.External/UpdatePipeline"
	External_DeletePipeline_FullMethodName        = "/protos.External/DeletePipeline"
	External_AttachPipeline_FullMethodName        = "/protos.External/AttachPipeline"
	External_DetachPipeline_FullMethodName        = "/protos.External/DetachPipeline"
	External_PausePipeline_FullMethodName         = "/protos.External/PausePipeline"
	External_ResumePipeline_FullMethodName        = "/protos.External/ResumePipeline"
	External_CreateNotification_FullMethodName    = "/protos.External/CreateNotification"
	External_UpdateNotification_FullMethodName    = "/protos.External/UpdateNotification"
	External_DeleteNotification_FullMethodName    = "/protos.External/DeleteNotification"
	External_GetNotifications_FullMethodName      = "/protos.External/GetNotifications"
	External_GetNotification_FullMethodName       = "/protos.External/GetNotification"
	External_AttachNotification_FullMethodName    = "/protos.External/AttachNotification"
	External_DetachNotification_FullMethodName    = "/protos.External/DetachNotification"
	External_DeleteAudience_FullMethodName        = "/protos.External/DeleteAudience"
	External_DeleteService_FullMethodName         = "/protos.External/DeleteService"
	External_GetMetrics_FullMethodName            = "/protos.External/GetMetrics"
	External_Tail_FullMethodName                  = "/protos.External/Tail"
	External_PauseTail_FullMethodName             = "/protos.External/PauseTail"
	External_ResumeTail_FullMethodName            = "/protos.External/ResumeTail"
	External_GetAudienceRates_FullMethodName      = "/protos.External/GetAudienceRates"
	External_GetSchema_FullMethodName             = "/protos.External/GetSchema"
	External_AppRegistrationStatus_FullMethodName = "/protos.External/AppRegistrationStatus"
	External_AppRegister_FullMethodName           = "/protos.External/AppRegister"
	External_AppVerifyRegistration_FullMethodName = "/protos.External/AppVerifyRegistration"
	External_AppRegisterReject_FullMethodName     = "/protos.External/AppRegisterReject"
	External_GetPipelineHistory_FullMethodName    = "/protos.External/GetPipelineHistory"
	External_Test_FullMethodName                  = "/protos.External/Test"
)

// ExternalClient is the client API for External service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalClient interface {
	// Should return everything that is needed to build the initial view in the console
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	// Temporary method to test gRPC-Web streaming
	GetAllStream(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (External_GetAllStreamClient, error)
	// Returns pipelines (_wasm_bytes field is stripped)
	GetPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error)
	// Returns a single pipeline (_wasm_bytes field is stripped)
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	// Create a new pipeline; id must be left empty on create
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	// Update an existing pipeline; id must be set
	UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Delete a pipeline
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Attach a pipeline to an audience
	AttachPipeline(ctx context.Context, in *AttachPipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Detach a pipeline from an audience
	DetachPipeline(ctx context.Context, in *DetachPipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Pause a pipeline; noop if pipeline is already paused
	PausePipeline(ctx context.Context, in *PausePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Resume a pipeline; noop if pipeline is not paused
	ResumePipeline(ctx context.Context, in *ResumePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Create a new notification config
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Update an existing notification config
	UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Delete a notification config
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Returns all notification configs
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	// Returns a single notification config
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error)
	// Attach a notification config to a pipeline
	AttachNotification(ctx context.Context, in *AttachNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Detach a notification config from a pipeline
	DetachNotification(ctx context.Context, in *DetachNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Delete an audience
	DeleteAudience(ctx context.Context, in *DeleteAudienceRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Delete a service and all associated audiences
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Returns all metric counters
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (External_GetMetricsClient, error)
	Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (External_TailClient, error)
	PauseTail(ctx context.Context, in *PauseTailRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	ResumeTail(ctx context.Context, in *ResumeTailRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	GetAudienceRates(ctx context.Context, in *GetAudienceRatesRequest, opts ...grpc.CallOption) (External_GetAudienceRatesClient, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	AppRegistrationStatus(ctx context.Context, in *AppRegistrationStatusRequest, opts ...grpc.CallOption) (*AppRegistrationStatusResponse, error)
	AppRegister(ctx context.Context, in *AppRegistrationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	AppVerifyRegistration(ctx context.Context, in *AppVerifyRegistrationRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	AppRegisterReject(ctx context.Context, in *AppRegisterRejectRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	GetPipelineHistory(ctx context.Context, in *GetPipelineHistoryRequest, opts ...grpc.CallOption) (*GetPipelineHistoryResponse, error)
	// Test method
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type externalClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalClient(cc grpc.ClientConnInterface) ExternalClient {
	return &externalClient{cc}
}

func (c *externalClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, External_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetAllStream(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (External_GetAllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &External_ServiceDesc.Streams[0], External_GetAllStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &externalGetAllStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type External_GetAllStreamClient interface {
	Recv() (*GetAllResponse, error)
	grpc.ClientStream
}

type externalGetAllStreamClient struct {
	grpc.ClientStream
}

func (x *externalGetAllStreamClient) Recv() (*GetAllResponse, error) {
	m := new(GetAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalClient) GetPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error) {
	out := new(GetPipelinesResponse)
	err := c.cc.Invoke(ctx, External_GetPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, External_GetPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, External_CreatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_UpdatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_DeletePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) AttachPipeline(ctx context.Context, in *AttachPipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_AttachPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DetachPipeline(ctx context.Context, in *DetachPipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_DetachPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) PausePipeline(ctx context.Context, in *PausePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_PausePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) ResumePipeline(ctx context.Context, in *ResumePipelineRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_ResumePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_CreateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_UpdateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_DeleteNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, External_GetNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error) {
	out := new(GetNotificationResponse)
	err := c.cc.Invoke(ctx, External_GetNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) AttachNotification(ctx context.Context, in *AttachNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_AttachNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DetachNotification(ctx context.Context, in *DetachNotificationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_DetachNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DeleteAudience(ctx context.Context, in *DeleteAudienceRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_DeleteAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (External_GetMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &External_ServiceDesc.Streams[1], External_GetMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &externalGetMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type External_GetMetricsClient interface {
	Recv() (*GetMetricsResponse, error)
	grpc.ClientStream
}

type externalGetMetricsClient struct {
	grpc.ClientStream
}

func (x *externalGetMetricsClient) Recv() (*GetMetricsResponse, error) {
	m := new(GetMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalClient) Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (External_TailClient, error) {
	stream, err := c.cc.NewStream(ctx, &External_ServiceDesc.Streams[2], External_Tail_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &externalTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type External_TailClient interface {
	Recv() (*TailResponse, error)
	grpc.ClientStream
}

type externalTailClient struct {
	grpc.ClientStream
}

func (x *externalTailClient) Recv() (*TailResponse, error) {
	m := new(TailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalClient) PauseTail(ctx context.Context, in *PauseTailRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_PauseTail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) ResumeTail(ctx context.Context, in *ResumeTailRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_ResumeTail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetAudienceRates(ctx context.Context, in *GetAudienceRatesRequest, opts ...grpc.CallOption) (External_GetAudienceRatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &External_ServiceDesc.Streams[3], External_GetAudienceRates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &externalGetAudienceRatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type External_GetAudienceRatesClient interface {
	Recv() (*GetAudienceRatesResponse, error)
	grpc.ClientStream
}

type externalGetAudienceRatesClient struct {
	grpc.ClientStream
}

func (x *externalGetAudienceRatesClient) Recv() (*GetAudienceRatesResponse, error) {
	m := new(GetAudienceRatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, External_GetSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) AppRegistrationStatus(ctx context.Context, in *AppRegistrationStatusRequest, opts ...grpc.CallOption) (*AppRegistrationStatusResponse, error) {
	out := new(AppRegistrationStatusResponse)
	err := c.cc.Invoke(ctx, External_AppRegistrationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) AppRegister(ctx context.Context, in *AppRegistrationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_AppRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) AppVerifyRegistration(ctx context.Context, in *AppVerifyRegistrationRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_AppVerifyRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) AppRegisterReject(ctx context.Context, in *AppRegisterRejectRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, External_AppRegisterReject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetPipelineHistory(ctx context.Context, in *GetPipelineHistoryRequest, opts ...grpc.CallOption) (*GetPipelineHistoryResponse, error) {
	out := new(GetPipelineHistoryResponse)
	err := c.cc.Invoke(ctx, External_GetPipelineHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, External_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServer is the server API for External service.
// All implementations must embed UnimplementedExternalServer
// for forward compatibility
type ExternalServer interface {
	// Should return everything that is needed to build the initial view in the console
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	// Temporary method to test gRPC-Web streaming
	GetAllStream(*GetAllRequest, External_GetAllStreamServer) error
	// Returns pipelines (_wasm_bytes field is stripped)
	GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error)
	// Returns a single pipeline (_wasm_bytes field is stripped)
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	// Create a new pipeline; id must be left empty on create
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	// Update an existing pipeline; id must be set
	UpdatePipeline(context.Context, *UpdatePipelineRequest) (*StandardResponse, error)
	// Delete a pipeline
	DeletePipeline(context.Context, *DeletePipelineRequest) (*StandardResponse, error)
	// Attach a pipeline to an audience
	AttachPipeline(context.Context, *AttachPipelineRequest) (*StandardResponse, error)
	// Detach a pipeline from an audience
	DetachPipeline(context.Context, *DetachPipelineRequest) (*StandardResponse, error)
	// Pause a pipeline; noop if pipeline is already paused
	PausePipeline(context.Context, *PausePipelineRequest) (*StandardResponse, error)
	// Resume a pipeline; noop if pipeline is not paused
	ResumePipeline(context.Context, *ResumePipelineRequest) (*StandardResponse, error)
	// Create a new notification config
	CreateNotification(context.Context, *CreateNotificationRequest) (*StandardResponse, error)
	// Update an existing notification config
	UpdateNotification(context.Context, *UpdateNotificationRequest) (*StandardResponse, error)
	// Delete a notification config
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*StandardResponse, error)
	// Returns all notification configs
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	// Returns a single notification config
	GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error)
	// Attach a notification config to a pipeline
	AttachNotification(context.Context, *AttachNotificationRequest) (*StandardResponse, error)
	// Detach a notification config from a pipeline
	DetachNotification(context.Context, *DetachNotificationRequest) (*StandardResponse, error)
	// Delete an audience
	DeleteAudience(context.Context, *DeleteAudienceRequest) (*StandardResponse, error)
	// Delete a service and all associated audiences
	DeleteService(context.Context, *DeleteServiceRequest) (*StandardResponse, error)
	// Returns all metric counters
	GetMetrics(*GetMetricsRequest, External_GetMetricsServer) error
	Tail(*TailRequest, External_TailServer) error
	PauseTail(context.Context, *PauseTailRequest) (*StandardResponse, error)
	ResumeTail(context.Context, *ResumeTailRequest) (*StandardResponse, error)
	GetAudienceRates(*GetAudienceRatesRequest, External_GetAudienceRatesServer) error
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	AppRegistrationStatus(context.Context, *AppRegistrationStatusRequest) (*AppRegistrationStatusResponse, error)
	AppRegister(context.Context, *AppRegistrationRequest) (*StandardResponse, error)
	AppVerifyRegistration(context.Context, *AppVerifyRegistrationRequest) (*StandardResponse, error)
	AppRegisterReject(context.Context, *AppRegisterRejectRequest) (*StandardResponse, error)
	GetPipelineHistory(context.Context, *GetPipelineHistoryRequest) (*GetPipelineHistoryResponse, error)
	// Test method
	Test(context.Context, *TestRequest) (*TestResponse, error)
	mustEmbedUnimplementedExternalServer()
}

// UnimplementedExternalServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServer struct {
}

func (UnimplementedExternalServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedExternalServer) GetAllStream(*GetAllRequest, External_GetAllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStream not implemented")
}
func (UnimplementedExternalServer) GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelines not implemented")
}
func (UnimplementedExternalServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedExternalServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedExternalServer) UpdatePipeline(context.Context, *UpdatePipelineRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeline not implemented")
}
func (UnimplementedExternalServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedExternalServer) AttachPipeline(context.Context, *AttachPipelineRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachPipeline not implemented")
}
func (UnimplementedExternalServer) DetachPipeline(context.Context, *DetachPipelineRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachPipeline not implemented")
}
func (UnimplementedExternalServer) PausePipeline(context.Context, *PausePipelineRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausePipeline not implemented")
}
func (UnimplementedExternalServer) ResumePipeline(context.Context, *ResumePipelineRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumePipeline not implemented")
}
func (UnimplementedExternalServer) CreateNotification(context.Context, *CreateNotificationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedExternalServer) UpdateNotification(context.Context, *UpdateNotificationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedExternalServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedExternalServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedExternalServer) GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedExternalServer) AttachNotification(context.Context, *AttachNotificationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachNotification not implemented")
}
func (UnimplementedExternalServer) DetachNotification(context.Context, *DetachNotificationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachNotification not implemented")
}
func (UnimplementedExternalServer) DeleteAudience(context.Context, *DeleteAudienceRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAudience not implemented")
}
func (UnimplementedExternalServer) DeleteService(context.Context, *DeleteServiceRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedExternalServer) GetMetrics(*GetMetricsRequest, External_GetMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedExternalServer) Tail(*TailRequest, External_TailServer) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedExternalServer) PauseTail(context.Context, *PauseTailRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseTail not implemented")
}
func (UnimplementedExternalServer) ResumeTail(context.Context, *ResumeTailRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTail not implemented")
}
func (UnimplementedExternalServer) GetAudienceRates(*GetAudienceRatesRequest, External_GetAudienceRatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAudienceRates not implemented")
}
func (UnimplementedExternalServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedExternalServer) AppRegistrationStatus(context.Context, *AppRegistrationStatusRequest) (*AppRegistrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRegistrationStatus not implemented")
}
func (UnimplementedExternalServer) AppRegister(context.Context, *AppRegistrationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRegister not implemented")
}
func (UnimplementedExternalServer) AppVerifyRegistration(context.Context, *AppVerifyRegistrationRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppVerifyRegistration not implemented")
}
func (UnimplementedExternalServer) AppRegisterReject(context.Context, *AppRegisterRejectRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRegisterReject not implemented")
}
func (UnimplementedExternalServer) GetPipelineHistory(context.Context, *GetPipelineHistoryRequest) (*GetPipelineHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineHistory not implemented")
}
func (UnimplementedExternalServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedExternalServer) mustEmbedUnimplementedExternalServer() {}

// UnsafeExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServer will
// result in compilation errors.
type UnsafeExternalServer interface {
	mustEmbedUnimplementedExternalServer()
}

func RegisterExternalServer(s grpc.ServiceRegistrar, srv ExternalServer) {
	s.RegisterService(&External_ServiceDesc, srv)
}

func _External_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetAllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalServer).GetAllStream(m, &externalGetAllStreamServer{stream})
}

type External_GetAllStreamServer interface {
	Send(*GetAllResponse) error
	grpc.ServerStream
}

type externalGetAllStreamServer struct {
	grpc.ServerStream
}

func (x *externalGetAllStreamServer) Send(m *GetAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _External_GetPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetPipelines(ctx, req.(*GetPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_UpdatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).UpdatePipeline(ctx, req.(*UpdatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_DeletePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_AttachPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).AttachPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_AttachPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).AttachPipeline(ctx, req.(*AttachPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DetachPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DetachPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_DetachPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DetachPipeline(ctx, req.(*DetachPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_PausePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PausePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).PausePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_PausePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).PausePipeline(ctx, req.(*PausePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_ResumePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).ResumePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_ResumePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).ResumePipeline(ctx, req.(*ResumePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_UpdateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).UpdateNotification(ctx, req.(*UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_AttachNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).AttachNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_AttachNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).AttachNotification(ctx, req.(*AttachNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DetachNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DetachNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_DetachNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DetachNotification(ctx, req.(*DetachNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DeleteAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DeleteAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_DeleteAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DeleteAudience(ctx, req.(*DeleteAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalServer).GetMetrics(m, &externalGetMetricsServer{stream})
}

type External_GetMetricsServer interface {
	Send(*GetMetricsResponse) error
	grpc.ServerStream
}

type externalGetMetricsServer struct {
	grpc.ServerStream
}

func (x *externalGetMetricsServer) Send(m *GetMetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _External_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalServer).Tail(m, &externalTailServer{stream})
}

type External_TailServer interface {
	Send(*TailResponse) error
	grpc.ServerStream
}

type externalTailServer struct {
	grpc.ServerStream
}

func (x *externalTailServer) Send(m *TailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _External_PauseTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseTailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).PauseTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_PauseTail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).PauseTail(ctx, req.(*PauseTailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_ResumeTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeTailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).ResumeTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_ResumeTail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).ResumeTail(ctx, req.(*ResumeTailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetAudienceRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAudienceRatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalServer).GetAudienceRates(m, &externalGetAudienceRatesServer{stream})
}

type External_GetAudienceRatesServer interface {
	Send(*GetAudienceRatesResponse) error
	grpc.ServerStream
}

type externalGetAudienceRatesServer struct {
	grpc.ServerStream
}

func (x *externalGetAudienceRatesServer) Send(m *GetAudienceRatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _External_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_AppRegistrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRegistrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).AppRegistrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_AppRegistrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).AppRegistrationStatus(ctx, req.(*AppRegistrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_AppRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).AppRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_AppRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).AppRegister(ctx, req.(*AppRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_AppVerifyRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVerifyRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).AppVerifyRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_AppVerifyRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).AppVerifyRegistration(ctx, req.(*AppVerifyRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_AppRegisterReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRegisterRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).AppRegisterReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_AppRegisterReject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).AppRegisterReject(ctx, req.(*AppRegisterRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetPipelineHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetPipelineHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_GetPipelineHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetPipelineHistory(ctx, req.(*GetPipelineHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: External_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// External_ServiceDesc is the grpc.ServiceDesc for External service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var External_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.External",
	HandlerType: (*ExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _External_GetAll_Handler,
		},
		{
			MethodName: "GetPipelines",
			Handler:    _External_GetPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _External_GetPipeline_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _External_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _External_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _External_DeletePipeline_Handler,
		},
		{
			MethodName: "AttachPipeline",
			Handler:    _External_AttachPipeline_Handler,
		},
		{
			MethodName: "DetachPipeline",
			Handler:    _External_DetachPipeline_Handler,
		},
		{
			MethodName: "PausePipeline",
			Handler:    _External_PausePipeline_Handler,
		},
		{
			MethodName: "ResumePipeline",
			Handler:    _External_ResumePipeline_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _External_CreateNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _External_UpdateNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _External_DeleteNotification_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _External_GetNotifications_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _External_GetNotification_Handler,
		},
		{
			MethodName: "AttachNotification",
			Handler:    _External_AttachNotification_Handler,
		},
		{
			MethodName: "DetachNotification",
			Handler:    _External_DetachNotification_Handler,
		},
		{
			MethodName: "DeleteAudience",
			Handler:    _External_DeleteAudience_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _External_DeleteService_Handler,
		},
		{
			MethodName: "PauseTail",
			Handler:    _External_PauseTail_Handler,
		},
		{
			MethodName: "ResumeTail",
			Handler:    _External_ResumeTail_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _External_GetSchema_Handler,
		},
		{
			MethodName: "AppRegistrationStatus",
			Handler:    _External_AppRegistrationStatus_Handler,
		},
		{
			MethodName: "AppRegister",
			Handler:    _External_AppRegister_Handler,
		},
		{
			MethodName: "AppVerifyRegistration",
			Handler:    _External_AppVerifyRegistration_Handler,
		},
		{
			MethodName: "AppRegisterReject",
			Handler:    _External_AppRegisterReject_Handler,
		},
		{
			MethodName: "GetPipelineHistory",
			Handler:    _External_GetPipelineHistory_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _External_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStream",
			Handler:       _External_GetAllStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMetrics",
			Handler:       _External_GetMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _External_Tail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAudienceRates",
			Handler:       _External_GetAudienceRates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sp_external.proto",
}
